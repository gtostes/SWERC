{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1047,
   "id": "e41b25a0",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "from copy import deepcopy\n",
    "from time import time\n",
    "from random import shuffle"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1059,
   "id": "2c910142",
   "metadata": {},
   "outputs": [],
   "source": [
    "class board:\n",
    "    def __init__(self):\n",
    "        self.grid = np.zeros((7,9), dtype='uint8')\n",
    "        self.numb = 0\n",
    "        \n",
    "    def check(self):\n",
    "        \n",
    "        def check_horizontal(i,j):\n",
    "            if j>5: return False\n",
    "            for add in range(1,4):\n",
    "                if self.grid[i,j] != self.grid[i,j+add]: return False\n",
    "            return True\n",
    "        \n",
    "        def check_vertical(i,j):\n",
    "            if i<3: return False\n",
    "            for add in range(1,4):\n",
    "                if self.grid[i,j] != self.grid[i-add,j]: return False\n",
    "            return True\n",
    "        \n",
    "        def check_right(i,j):\n",
    "            if i<3 or j>5: return False\n",
    "            for add in range(1,4):\n",
    "                if self.grid[i,j] != self.grid[i-add,j+add]: return False\n",
    "            return True\n",
    "        \n",
    "        def check_left(i,j):\n",
    "            if i<3 or j<3: return False\n",
    "            for add in range(1,4):\n",
    "                if self.grid[i,j] != self.grid[i-add,j-add]: return False\n",
    "            return True\n",
    "        \n",
    "        for i in range(7):\n",
    "            for j in range(9):\n",
    "                if self.grid[i,j]!=0:\n",
    "                    if check_horizontal(i,j): return self.grid[i,j]\n",
    "                    if check_vertical(i,j): return self.grid[i,j]\n",
    "                    if check_right(i,j): return self.grid[i,j]\n",
    "                    if check_left(i,j): return self.grid[i,j]\n",
    "                    \n",
    "        if self.numb == 63: return 3\n",
    "        return 0\n",
    "    \n",
    "    def check_pos(self, i, j):\n",
    "        directions = [(-1,0),(-1,1),(0,1),(1,1),(1,0),(1,-1),(0,-1),(-1,-1)]\n",
    "        most = []\n",
    "        I = i\n",
    "        J = j\n",
    "        for d in directions:\n",
    "            mov = 0\n",
    "            while i+d[0]<7 and i+d[0]>=0 and j+d[1]<9 and j+d[1]>=0:\n",
    "                i+=d[0]\n",
    "                j+=d[1]\n",
    "                if self.grid[i][j] == self.grid[I][J]:\n",
    "                    mov+=1\n",
    "                else: break\n",
    "            i = I\n",
    "            j = J\n",
    "            most.append(mov)\n",
    "            \n",
    "        for i in range(4):\n",
    "            if most[i] + most[i+4] >=3: return True\n",
    "        return False\n",
    "            \n",
    "        \n",
    "    \n",
    "    def play(self, player, col):\n",
    "        j = 0\n",
    "        while(j+1 < 7 and self.grid[j+1][col]==0): j+=1\n",
    "        self.grid[j][col] = player\n",
    "        self.numb+=1\n",
    "        return (j,col)\n",
    "    \n",
    "    def can_play(self,col):\n",
    "        return self.grid[0][col] == 0\n",
    "    \n",
    "    def possible_plays(self):\n",
    "        plays = []\n",
    "        for i in range(9):\n",
    "            if self.can_play(i): plays.append(i)\n",
    "        return plays\n",
    "    \n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1065,
   "id": "4b34b8cf",
   "metadata": {},
   "outputs": [],
   "source": [
    "class node:\n",
    "    def __init__(self, move, player, parent = None):\n",
    "        self.move = move\n",
    "        self.player = player\n",
    "        self.parent = parent\n",
    "        self.children = {}\n",
    "        self.n = 0\n",
    "        self.wins = 0\n",
    "        \n",
    "    def value(self, c = 1.4):\n",
    "        return self.wins/self.n + c*np.sqrt(np.log(self.parent.n)/self.n)\n",
    "        \n",
    "    def all_children(self, board):\n",
    "        return len(self.children) == len(board.possible_plays())\n",
    "        \n",
    "    def add_child(self, moves):\n",
    "        for move in moves:\n",
    "            if move not in self.children:\n",
    "                child = node(move, 3 - self.player, self)\n",
    "                self.children[move] = child\n",
    "                return child\n",
    "    \n",
    "    def next_node(self, c = 1.4):\n",
    "        next_ = None\n",
    "        max_p = 0\n",
    "        for move in self.children:\n",
    "            child = self.children[move]\n",
    "            p = child.value(c)\n",
    "            if p > max_p:\n",
    "                next_ = child\n",
    "                max_p = p\n",
    "        return next_\n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1062,
   "id": "3bead4b4",
   "metadata": {},
   "outputs": [],
   "source": [
    "class game:\n",
    "    def __init__(self, board, node):\n",
    "        self.board = board\n",
    "        self.state = node\n",
    "        \n",
    "    def selection(self):\n",
    "        position = self.state\n",
    "        board_at_position = deepcopy(self.board)\n",
    "        \n",
    "        while position.all_children(board_at_position):\n",
    "            position = position.next_node()\n",
    "            board_at_position.play(position.player, position.move)\n",
    "        \n",
    "        return position, board_at_position\n",
    "    \n",
    "    def expansion(self, position, board_at_position):\n",
    "        check = board_at_position.check()\n",
    "        if check!=0:\n",
    "            return position, board_at_position\n",
    "        \n",
    "        expansion = position.add_child(moves)\n",
    "        board_at_position.play(expansion.player, expansion.move)\n",
    "        \n",
    "        return expansion, board_at_position\n",
    "        \n",
    "    \n",
    "    def simulation(self, expansion, board_at_position):\n",
    "        check = board_at_position.check()\n",
    "            \n",
    "        if check!=0:\n",
    "            return check\n",
    "        \n",
    "        next_plays = []\n",
    "        for i in range(7):\n",
    "            for j in range(9):\n",
    "                if board_at_position.grid[i,j] == 0:\n",
    "                    next_plays.append(j)\n",
    "        \n",
    "#         shuffle(next_plays)\n",
    "        actual_player = 3 - expansion.player\n",
    "        \n",
    "        while 1:\n",
    "            if len(next_plays) == 0: return 3\n",
    "            where = np.random.choice(next_plays)\n",
    "            next_plays.remove(where)\n",
    "            i,j = board_at_position.play(actual_player, where)\n",
    "            if board_at_position.check_pos(i,j):\n",
    "                return board_at_position.grid[i,j]\n",
    "            actual_player = 3 - actual_player\n",
    "            \n",
    "    \n",
    "    def back_propagation(self, won, expansion):\n",
    "        while expansion is not None:\n",
    "            expansion.n += 1\n",
    "            \n",
    "            if won == 1 and expansion.player == 1: expansion.wins +=1\n",
    "            if won == 2 and expansion.player == 2: expansion.wins +=1\n",
    "            if won == 3 : expansion.wins += 0.5\n",
    "            \n",
    "            if expansion == self.state: break\n",
    "            expansion = expansion.parent\n",
    "        \n",
    "    def best_move(self):\n",
    "        move_ = None\n",
    "        max_p = 0\n",
    "        for move in self.state.children:\n",
    "            child = self.state.children[move]\n",
    "            p = child.wins/child.n\n",
    "            if p > max_p:\n",
    "                move_ = move\n",
    "                max_p = p\n",
    "            \n",
    "        return move_\n",
    "    \n",
    "    def play(self, move):\n",
    "        self.board.play(3 - self.state.player, move)\n",
    "        self.state = self.state.children[move]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1063,
   "id": "99e4b469",
   "metadata": {},
   "outputs": [],
   "source": [
    "def thinker(games, how_much_time = 5):\n",
    "    actual_time = time()\n",
    "    \n",
    "    while time() - actual_time < how_much_time:\n",
    "        node_, board_ = games.selection()\n",
    "        node_, board_ = games.expansion(node_, board_)\n",
    "        won = games.simulation(node_, board_)\n",
    "        games.back_propagation(won, node_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1072,
   "id": "935c8b85",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Player 1\n",
      "\n",
      "[[0 0 0 0 0 0 0 0 0]\n",
      " [0 0 0 0 0 0 0 0 0]\n",
      " [0 0 0 0 0 0 0 0 0]\n",
      " [0 0 0 0 0 0 0 0 0]\n",
      " [0 0 0 0 0 0 0 0 0]\n",
      " [0 0 0 0 0 0 0 0 0]\n",
      " [0 0 0 1 0 0 0 0 0]]\n",
      "\n",
      "Player 2\n",
      "\n",
      "[[0 0 0 0 0 0 0 0 0]\n",
      " [0 0 0 0 0 0 0 0 0]\n",
      " [0 0 0 0 0 0 0 0 0]\n",
      " [0 0 0 0 0 0 0 0 0]\n",
      " [0 0 0 0 0 0 0 0 0]\n",
      " [0 0 0 0 0 0 0 0 0]\n",
      " [0 0 0 1 0 2 0 0 0]]\n",
      "\n",
      "Player 1\n",
      "\n",
      "[[0 0 0 0 0 0 0 0 0]\n",
      " [0 0 0 0 0 0 0 0 0]\n",
      " [0 0 0 0 0 0 0 0 0]\n",
      " [0 0 0 0 0 0 0 0 0]\n",
      " [0 0 0 0 0 0 0 0 0]\n",
      " [0 0 0 0 0 0 0 0 0]\n",
      " [0 0 1 1 0 2 0 0 0]]\n",
      "\n",
      "Player 2\n",
      "\n",
      "[[0 0 0 0 0 0 0 0 0]\n",
      " [0 0 0 0 0 0 0 0 0]\n",
      " [0 0 0 0 0 0 0 0 0]\n",
      " [0 0 0 0 0 0 0 0 0]\n",
      " [0 0 0 0 0 0 0 0 0]\n",
      " [0 0 0 0 0 0 0 0 0]\n",
      " [0 2 1 1 0 2 0 0 0]]\n",
      "\n",
      "Player 1\n",
      "\n",
      "[[0 0 0 0 0 0 0 0 0]\n",
      " [0 0 0 0 0 0 0 0 0]\n",
      " [0 0 0 0 0 0 0 0 0]\n",
      " [0 0 0 0 0 0 0 0 0]\n",
      " [0 0 0 0 0 0 0 0 0]\n",
      " [0 0 0 1 0 0 0 0 0]\n",
      " [0 2 1 1 0 2 0 0 0]]\n",
      "\n",
      "Player 2\n",
      "\n",
      "[[0 0 0 0 0 0 0 0 0]\n",
      " [0 0 0 0 0 0 0 0 0]\n",
      " [0 0 0 0 0 0 0 0 0]\n",
      " [0 0 0 0 0 0 0 0 0]\n",
      " [0 0 0 2 0 0 0 0 0]\n",
      " [0 0 0 1 0 0 0 0 0]\n",
      " [0 2 1 1 0 2 0 0 0]]\n",
      "\n",
      "Player 1\n",
      "\n",
      "[[0 0 0 0 0 0 0 0 0]\n",
      " [0 0 0 0 0 0 0 0 0]\n",
      " [0 0 0 0 0 0 0 0 0]\n",
      " [0 0 0 0 0 0 0 0 0]\n",
      " [0 0 0 2 0 0 0 0 0]\n",
      " [0 0 1 1 0 0 0 0 0]\n",
      " [0 2 1 1 0 2 0 0 0]]\n",
      "\n",
      "Player 2\n",
      "\n",
      "[[0 0 0 0 0 0 0 0 0]\n",
      " [0 0 0 0 0 0 0 0 0]\n",
      " [0 0 0 0 0 0 0 0 0]\n",
      " [0 0 0 0 0 0 0 0 0]\n",
      " [0 0 0 2 0 0 0 0 0]\n",
      " [0 2 1 1 0 0 0 0 0]\n",
      " [0 2 1 1 0 2 0 0 0]]\n",
      "\n",
      "Player 1\n",
      "\n",
      "[[0 0 0 0 0 0 0 0 0]\n",
      " [0 0 0 0 0 0 0 0 0]\n",
      " [0 0 0 0 0 0 0 0 0]\n",
      " [0 0 0 0 0 0 0 0 0]\n",
      " [0 1 0 2 0 0 0 0 0]\n",
      " [0 2 1 1 0 0 0 0 0]\n",
      " [0 2 1 1 0 2 0 0 0]]\n",
      "\n",
      "Player 2\n",
      "\n",
      "[[0 0 0 0 0 0 0 0 0]\n",
      " [0 0 0 0 0 0 0 0 0]\n",
      " [0 0 0 0 0 0 0 0 0]\n",
      " [0 0 0 0 0 0 0 0 0]\n",
      " [0 1 2 2 0 0 0 0 0]\n",
      " [0 2 1 1 0 0 0 0 0]\n",
      " [0 2 1 1 0 2 0 0 0]]\n",
      "\n",
      "Player 1\n",
      "\n",
      "[[0 0 0 0 0 0 0 0 0]\n",
      " [0 0 0 0 0 0 0 0 0]\n",
      " [0 0 0 0 0 0 0 0 0]\n",
      " [0 0 0 0 0 0 0 0 0]\n",
      " [0 1 2 2 0 0 0 0 0]\n",
      " [0 2 1 1 0 1 0 0 0]\n",
      " [0 2 1 1 0 2 0 0 0]]\n",
      "\n",
      "Player 2\n",
      "\n",
      "[[0 0 0 0 0 0 0 0 0]\n",
      " [0 0 0 0 0 0 0 0 0]\n",
      " [0 0 0 0 0 0 0 0 0]\n",
      " [0 0 2 0 0 0 0 0 0]\n",
      " [0 1 2 2 0 0 0 0 0]\n",
      " [0 2 1 1 0 1 0 0 0]\n",
      " [0 2 1 1 0 2 0 0 0]]\n",
      "\n",
      "Player 1\n",
      "\n",
      "[[0 0 0 0 0 0 0 0 0]\n",
      " [0 0 0 0 0 0 0 0 0]\n",
      " [0 0 0 0 0 0 0 0 0]\n",
      " [0 0 2 0 0 0 0 0 0]\n",
      " [0 1 2 2 0 0 0 0 0]\n",
      " [0 2 1 1 0 1 0 0 0]\n",
      " [1 2 1 1 0 2 0 0 0]]\n",
      "\n",
      "Player 2\n",
      "\n",
      "[[0 0 0 0 0 0 0 0 0]\n",
      " [0 0 0 0 0 0 0 0 0]\n",
      " [0 0 2 0 0 0 0 0 0]\n",
      " [0 0 2 0 0 0 0 0 0]\n",
      " [0 1 2 2 0 0 0 0 0]\n",
      " [0 2 1 1 0 1 0 0 0]\n",
      " [1 2 1 1 0 2 0 0 0]]\n",
      "\n",
      "Player 1\n",
      "\n",
      "[[0 0 0 0 0 0 0 0 0]\n",
      " [0 0 1 0 0 0 0 0 0]\n",
      " [0 0 2 0 0 0 0 0 0]\n",
      " [0 0 2 0 0 0 0 0 0]\n",
      " [0 1 2 2 0 0 0 0 0]\n",
      " [0 2 1 1 0 1 0 0 0]\n",
      " [1 2 1 1 0 2 0 0 0]]\n",
      "\n",
      "Player 2\n",
      "\n",
      "[[0 0 0 0 0 0 0 0 0]\n",
      " [0 0 1 0 0 0 0 0 0]\n",
      " [0 0 2 0 0 0 0 0 0]\n",
      " [0 0 2 0 0 0 0 0 0]\n",
      " [0 1 2 2 0 0 0 0 0]\n",
      " [0 2 1 1 0 1 0 0 0]\n",
      " [1 2 1 1 0 2 0 2 0]]\n",
      "\n",
      "Player 1\n",
      "\n",
      "[[0 0 0 0 0 0 0 0 0]\n",
      " [0 0 1 0 0 0 0 0 0]\n",
      " [0 0 2 0 0 0 0 0 0]\n",
      " [0 0 2 0 0 0 0 0 0]\n",
      " [0 1 2 2 0 0 0 0 0]\n",
      " [0 2 1 1 0 1 0 0 0]\n",
      " [1 2 1 1 0 2 1 2 0]]\n",
      "\n",
      "Player 2\n",
      "\n",
      "[[0 0 0 0 0 0 0 0 0]\n",
      " [0 0 1 0 0 0 0 0 0]\n",
      " [0 0 2 0 0 0 0 0 0]\n",
      " [0 0 2 0 0 0 0 0 0]\n",
      " [0 1 2 2 0 0 0 0 0]\n",
      " [0 2 1 1 0 1 0 2 0]\n",
      " [1 2 1 1 0 2 1 2 0]]\n",
      "\n",
      "Player 1\n",
      "\n",
      "[[0 0 0 0 0 0 0 0 0]\n",
      " [0 0 1 0 0 0 0 0 0]\n",
      " [0 0 2 0 0 0 0 0 0]\n",
      " [0 0 2 0 0 0 0 0 0]\n",
      " [0 1 2 2 0 0 0 1 0]\n",
      " [0 2 1 1 0 1 0 2 0]\n",
      " [1 2 1 1 0 2 1 2 0]]\n",
      "\n",
      "Player 2\n",
      "\n",
      "[[0 0 0 0 0 0 0 0 0]\n",
      " [0 0 1 0 0 0 0 0 0]\n",
      " [0 0 2 0 0 0 0 0 0]\n",
      " [0 0 2 2 0 0 0 0 0]\n",
      " [0 1 2 2 0 0 0 1 0]\n",
      " [0 2 1 1 0 1 0 2 0]\n",
      " [1 2 1 1 0 2 1 2 0]]\n",
      "\n",
      "Player 1\n",
      "\n",
      "[[0 0 0 0 0 0 0 0 0]\n",
      " [0 0 1 0 0 0 0 0 0]\n",
      " [0 0 2 0 0 0 0 0 0]\n",
      " [0 1 2 2 0 0 0 0 0]\n",
      " [0 1 2 2 0 0 0 1 0]\n",
      " [0 2 1 1 0 1 0 2 0]\n",
      " [1 2 1 1 0 2 1 2 0]]\n",
      "\n",
      "Player 2\n",
      "\n",
      "[[0 0 0 0 0 0 0 0 0]\n",
      " [0 0 1 0 0 0 0 0 0]\n",
      " [0 2 2 0 0 0 0 0 0]\n",
      " [0 1 2 2 0 0 0 0 0]\n",
      " [0 1 2 2 0 0 0 1 0]\n",
      " [0 2 1 1 0 1 0 2 0]\n",
      " [1 2 1 1 0 2 1 2 0]]\n",
      "\n",
      "Player 1\n",
      "\n",
      "[[0 0 0 0 0 0 0 0 0]\n",
      " [0 0 1 0 0 0 0 0 0]\n",
      " [0 2 2 1 0 0 0 0 0]\n",
      " [0 1 2 2 0 0 0 0 0]\n",
      " [0 1 2 2 0 0 0 1 0]\n",
      " [0 2 1 1 0 1 0 2 0]\n",
      " [1 2 1 1 0 2 1 2 0]]\n",
      "\n",
      "Player 2\n",
      "\n",
      "[[0 0 0 0 0 0 0 0 0]\n",
      " [0 0 1 0 0 0 0 0 0]\n",
      " [0 2 2 1 0 0 0 0 0]\n",
      " [0 1 2 2 0 0 0 0 0]\n",
      " [0 1 2 2 0 0 0 1 0]\n",
      " [0 2 1 1 0 1 0 2 0]\n",
      " [1 2 1 1 0 2 1 2 2]]\n",
      "\n",
      "Player 1\n",
      "\n",
      "[[0 0 0 0 0 0 0 0 0]\n",
      " [0 0 1 0 0 0 0 0 0]\n",
      " [0 2 2 1 0 0 0 0 0]\n",
      " [0 1 2 2 0 0 0 1 0]\n",
      " [0 1 2 2 0 0 0 1 0]\n",
      " [0 2 1 1 0 1 0 2 0]\n",
      " [1 2 1 1 0 2 1 2 2]]\n",
      "\n",
      "Player 2\n",
      "\n",
      "[[0 0 0 0 0 0 0 0 0]\n",
      " [0 0 1 0 0 0 0 0 0]\n",
      " [0 2 2 1 0 0 0 2 0]\n",
      " [0 1 2 2 0 0 0 1 0]\n",
      " [0 1 2 2 0 0 0 1 0]\n",
      " [0 2 1 1 0 1 0 2 0]\n",
      " [1 2 1 1 0 2 1 2 2]]\n",
      "\n",
      "Player 1\n",
      "\n",
      "[[0 0 0 0 0 0 0 0 0]\n",
      " [0 0 1 0 0 0 0 0 0]\n",
      " [0 2 2 1 0 0 0 2 0]\n",
      " [0 1 2 2 0 0 0 1 0]\n",
      " [0 1 2 2 0 0 0 1 0]\n",
      " [1 2 1 1 0 1 0 2 0]\n",
      " [1 2 1 1 0 2 1 2 2]]\n",
      "\n",
      "Player 2\n",
      "\n",
      "[[0 0 0 0 0 0 0 0 0]\n",
      " [0 0 1 0 0 0 0 0 0]\n",
      " [0 2 2 1 0 0 0 2 0]\n",
      " [0 1 2 2 0 0 0 1 0]\n",
      " [0 1 2 2 0 0 0 1 0]\n",
      " [1 2 1 1 0 1 0 2 2]\n",
      " [1 2 1 1 0 2 1 2 2]]\n",
      "\n",
      "Player 1\n",
      "\n",
      "[[0 0 0 0 0 0 0 0 0]\n",
      " [0 0 1 0 0 0 0 0 0]\n",
      " [0 2 2 1 0 0 0 2 0]\n",
      " [0 1 2 2 0 0 0 1 0]\n",
      " [0 1 2 2 0 0 0 1 1]\n",
      " [1 2 1 1 0 1 0 2 2]\n",
      " [1 2 1 1 0 2 1 2 2]]\n",
      "\n",
      "Player 2\n",
      "\n",
      "[[0 0 0 0 0 0 0 0 0]\n",
      " [0 0 1 0 0 0 0 0 0]\n",
      " [0 2 2 1 0 0 0 2 0]\n",
      " [0 1 2 2 0 0 0 1 0]\n",
      " [0 1 2 2 0 2 0 1 1]\n",
      " [1 2 1 1 0 1 0 2 2]\n",
      " [1 2 1 1 0 2 1 2 2]]\n",
      "\n",
      "Player 1\n",
      "\n",
      "[[0 0 0 0 0 0 0 0 0]\n",
      " [0 0 1 0 0 0 0 0 0]\n",
      " [0 2 2 1 0 0 0 2 0]\n",
      " [0 1 2 2 0 1 0 1 0]\n",
      " [0 1 2 2 0 2 0 1 1]\n",
      " [1 2 1 1 0 1 0 2 2]\n",
      " [1 2 1 1 0 2 1 2 2]]\n",
      "\n",
      "Player 2\n",
      "\n",
      "[[0 0 0 0 0 0 0 0 0]\n",
      " [0 0 1 0 0 0 0 0 0]\n",
      " [0 2 2 1 0 0 0 2 0]\n",
      " [0 1 2 2 0 1 0 1 2]\n",
      " [0 1 2 2 0 2 0 1 1]\n",
      " [1 2 1 1 0 1 0 2 2]\n",
      " [1 2 1 1 0 2 1 2 2]]\n",
      "\n",
      "Player 1\n",
      "\n",
      "[[0 0 0 0 0 0 0 0 0]\n",
      " [0 0 1 0 0 0 0 0 0]\n",
      " [0 2 2 1 0 0 0 2 1]\n",
      " [0 1 2 2 0 1 0 1 2]\n",
      " [0 1 2 2 0 2 0 1 1]\n",
      " [1 2 1 1 0 1 0 2 2]\n",
      " [1 2 1 1 0 2 1 2 2]]\n",
      "\n",
      "Player 2\n",
      "\n",
      "[[0 0 0 0 0 0 0 0 0]\n",
      " [0 0 1 0 0 0 0 0 2]\n",
      " [0 2 2 1 0 0 0 2 1]\n",
      " [0 1 2 2 0 1 0 1 2]\n",
      " [0 1 2 2 0 2 0 1 1]\n",
      " [1 2 1 1 0 1 0 2 2]\n",
      " [1 2 1 1 0 2 1 2 2]]\n",
      "\n",
      "Player 1\n",
      "\n",
      "[[0 0 0 0 0 0 0 0 1]\n",
      " [0 0 1 0 0 0 0 0 2]\n",
      " [0 2 2 1 0 0 0 2 1]\n",
      " [0 1 2 2 0 1 0 1 2]\n",
      " [0 1 2 2 0 2 0 1 1]\n",
      " [1 2 1 1 0 1 0 2 2]\n",
      " [1 2 1 1 0 2 1 2 2]]\n",
      "\n",
      "Player 2\n",
      "\n",
      "[[0 0 0 0 0 0 0 0 1]\n",
      " [0 0 1 2 0 0 0 0 2]\n",
      " [0 2 2 1 0 0 0 2 1]\n",
      " [0 1 2 2 0 1 0 1 2]\n",
      " [0 1 2 2 0 2 0 1 1]\n",
      " [1 2 1 1 0 1 0 2 2]\n",
      " [1 2 1 1 0 2 1 2 2]]\n",
      "\n",
      "Player 1\n",
      "\n",
      "[[0 0 0 0 0 0 0 0 1]\n",
      " [0 0 1 2 0 0 0 0 2]\n",
      " [0 2 2 1 0 1 0 2 1]\n",
      " [0 1 2 2 0 1 0 1 2]\n",
      " [0 1 2 2 0 2 0 1 1]\n",
      " [1 2 1 1 0 1 0 2 2]\n",
      " [1 2 1 1 0 2 1 2 2]]\n",
      "\n",
      "Player 2\n",
      "\n",
      "[[0 0 0 0 0 0 0 0 1]\n",
      " [0 0 1 2 0 2 0 0 2]\n",
      " [0 2 2 1 0 1 0 2 1]\n",
      " [0 1 2 2 0 1 0 1 2]\n",
      " [0 1 2 2 0 2 0 1 1]\n",
      " [1 2 1 1 0 1 0 2 2]\n",
      " [1 2 1 1 0 2 1 2 2]]\n",
      "\n",
      "Player 1\n",
      "\n",
      "[[0 0 0 1 0 0 0 0 1]\n",
      " [0 0 1 2 0 2 0 0 2]\n",
      " [0 2 2 1 0 1 0 2 1]\n",
      " [0 1 2 2 0 1 0 1 2]\n",
      " [0 1 2 2 0 2 0 1 1]\n",
      " [1 2 1 1 0 1 0 2 2]\n",
      " [1 2 1 1 0 2 1 2 2]]\n",
      "\n",
      "Player 2\n",
      "\n",
      "[[0 0 0 1 0 2 0 0 1]\n",
      " [0 0 1 2 0 2 0 0 2]\n",
      " [0 2 2 1 0 1 0 2 1]\n",
      " [0 1 2 2 0 1 0 1 2]\n",
      " [0 1 2 2 0 2 0 1 1]\n",
      " [1 2 1 1 0 1 0 2 2]\n",
      " [1 2 1 1 0 2 1 2 2]]\n",
      "\n",
      "Player 1\n",
      "\n",
      "[[0 0 0 1 0 1 0 0 1]\n",
      " [0 0 1 2 0 2 0 0 2]\n",
      " [0 2 2 1 0 1 0 2 1]\n",
      " [0 1 2 2 0 1 0 1 2]\n",
      " [0 1 2 2 0 2 0 1 1]\n",
      " [1 2 1 1 0 1 0 2 2]\n",
      " [1 2 1 1 0 2 1 2 2]]\n",
      "\n",
      "Player 2\n",
      "\n",
      "[[0 0 0 1 0 2 0 0 1]\n",
      " [0 0 1 2 0 2 0 0 2]\n",
      " [0 2 2 1 0 1 0 2 1]\n",
      " [0 1 2 2 0 1 0 1 2]\n",
      " [0 1 2 2 0 2 0 1 1]\n",
      " [1 2 1 1 0 1 0 2 2]\n",
      " [1 2 1 1 0 2 1 2 2]]\n",
      "\n",
      "Player 1\n",
      "\n",
      "[[0 0 0 1 0 2 0 0 1]\n",
      " [0 1 1 2 0 2 0 0 2]\n",
      " [0 2 2 1 0 1 0 2 1]\n",
      " [0 1 2 2 0 1 0 1 2]\n",
      " [0 1 2 2 0 2 0 1 1]\n",
      " [1 2 1 1 0 1 0 2 2]\n",
      " [1 2 1 1 0 2 1 2 2]]\n",
      "\n",
      "Player 2\n",
      "\n",
      "[[0 0 0 2 0 2 0 0 1]\n",
      " [0 1 1 2 0 2 0 0 2]\n",
      " [0 2 2 1 0 1 0 2 1]\n",
      " [0 1 2 2 0 1 0 1 2]\n",
      " [0 1 2 2 0 2 0 1 1]\n",
      " [1 2 1 1 0 1 0 2 2]\n",
      " [1 2 1 1 0 2 1 2 2]]\n",
      "\n",
      "Player 1\n",
      "\n",
      "[[0 0 0 1 0 2 0 0 1]\n",
      " [0 1 1 2 0 2 0 0 2]\n",
      " [0 2 2 1 0 1 0 2 1]\n",
      " [0 1 2 2 0 1 0 1 2]\n",
      " [0 1 2 2 0 2 0 1 1]\n",
      " [1 2 1 1 0 1 0 2 2]\n",
      " [1 2 1 1 0 2 1 2 2]]\n",
      "\n",
      "Player 2\n",
      "\n",
      "[[0 0 0 2 0 2 0 0 1]\n",
      " [0 1 1 2 0 2 0 0 2]\n",
      " [0 2 2 1 0 1 0 2 1]\n",
      " [0 1 2 2 0 1 0 1 2]\n",
      " [0 1 2 2 0 2 0 1 1]\n",
      " [1 2 1 1 0 1 0 2 2]\n",
      " [1 2 1 1 0 2 1 2 2]]\n",
      "\n",
      "Player 1\n",
      "\n",
      "[[0 1 0 2 0 2 0 0 1]\n",
      " [0 1 1 2 0 2 0 0 2]\n",
      " [0 2 2 1 0 1 0 2 1]\n",
      " [0 1 2 2 0 1 0 1 2]\n",
      " [0 1 2 2 0 2 0 1 1]\n",
      " [1 2 1 1 0 1 0 2 2]\n",
      " [1 2 1 1 0 2 1 2 2]]\n",
      "\n",
      "Player 2\n",
      "\n",
      "[[0 2 0 2 0 2 0 0 1]\n",
      " [0 1 1 2 0 2 0 0 2]\n",
      " [0 2 2 1 0 1 0 2 1]\n",
      " [0 1 2 2 0 1 0 1 2]\n",
      " [0 1 2 2 0 2 0 1 1]\n",
      " [1 2 1 1 0 1 0 2 2]\n",
      " [1 2 1 1 0 2 1 2 2]]\n",
      "\n",
      "Player 1\n",
      "\n",
      "[[0 1 0 2 0 2 0 0 1]\n",
      " [0 1 1 2 0 2 0 0 2]\n",
      " [0 2 2 1 0 1 0 2 1]\n",
      " [0 1 2 2 0 1 0 1 2]\n",
      " [0 1 2 2 0 2 0 1 1]\n",
      " [1 2 1 1 0 1 0 2 2]\n",
      " [1 2 1 1 0 2 1 2 2]]\n",
      "\n",
      "Player 2\n",
      "\n",
      "[[0 1 2 2 0 2 0 0 1]\n",
      " [0 1 1 2 0 2 0 0 2]\n",
      " [0 2 2 1 0 1 0 2 1]\n",
      " [0 1 2 2 0 1 0 1 2]\n",
      " [0 1 2 2 0 2 0 1 1]\n",
      " [1 2 1 1 0 1 0 2 2]\n",
      " [1 2 1 1 0 2 1 2 2]]\n",
      "\n",
      "Player 1\n",
      "\n",
      "[[0 1 2 1 0 2 0 0 1]\n",
      " [0 1 1 2 0 2 0 0 2]\n",
      " [0 2 2 1 0 1 0 2 1]\n",
      " [0 1 2 2 0 1 0 1 2]\n",
      " [0 1 2 2 0 2 0 1 1]\n",
      " [1 2 1 1 0 1 0 2 2]\n",
      " [1 2 1 1 0 2 1 2 2]]\n",
      "\n",
      "Player 2\n",
      "\n",
      "[[0 2 2 1 0 2 0 0 1]\n",
      " [0 1 1 2 0 2 0 0 2]\n",
      " [0 2 2 1 0 1 0 2 1]\n",
      " [0 1 2 2 0 1 0 1 2]\n",
      " [0 1 2 2 0 2 0 1 1]\n",
      " [1 2 1 1 0 1 0 2 2]\n",
      " [1 2 1 1 0 2 1 2 2]]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Player 1\n",
      "\n",
      "[[0 1 2 1 0 2 0 0 1]\n",
      " [0 1 1 2 0 2 0 0 2]\n",
      " [0 2 2 1 0 1 0 2 1]\n",
      " [0 1 2 2 0 1 0 1 2]\n",
      " [0 1 2 2 0 2 0 1 1]\n",
      " [1 2 1 1 0 1 0 2 2]\n",
      " [1 2 1 1 0 2 1 2 2]]\n",
      "\n",
      "Player 2\n",
      "\n",
      "[[0 2 2 1 0 2 0 0 1]\n",
      " [0 1 1 2 0 2 0 0 2]\n",
      " [0 2 2 1 0 1 0 2 1]\n",
      " [0 1 2 2 0 1 0 1 2]\n",
      " [0 1 2 2 0 2 0 1 1]\n",
      " [1 2 1 1 0 1 0 2 2]\n",
      " [1 2 1 1 0 2 1 2 2]]\n"
     ]
    },
    {
     "ename": "KeyboardInterrupt",
     "evalue": "",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[1072], line 7\u001b[0m\n\u001b[1;32m      4\u001b[0m thinker(games,\u001b[38;5;241m0.5\u001b[39m)\n\u001b[1;32m      6\u001b[0m \u001b[38;5;28;01mwhile\u001b[39;00m \u001b[38;5;241m1\u001b[39m:\n\u001b[0;32m----> 7\u001b[0m     \u001b[43mthinker\u001b[49m\u001b[43m(\u001b[49m\u001b[43mgames\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m8\u001b[39;49m\u001b[43m)\u001b[49m\n\u001b[1;32m      8\u001b[0m     \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124m'\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124mPlayer 1\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124m'\u001b[39m, flush \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mTrue\u001b[39;00m)\n\u001b[1;32m      9\u001b[0m     move \u001b[38;5;241m=\u001b[39m games\u001b[38;5;241m.\u001b[39mbest_move()\n",
      "Cell \u001b[0;32mIn[1063], line 7\u001b[0m, in \u001b[0;36mthinker\u001b[0;34m(games, how_much_time)\u001b[0m\n\u001b[1;32m      5\u001b[0m node_, board_ \u001b[38;5;241m=\u001b[39m games\u001b[38;5;241m.\u001b[39mselection()\n\u001b[1;32m      6\u001b[0m node_, board_ \u001b[38;5;241m=\u001b[39m games\u001b[38;5;241m.\u001b[39mexpansion(node_, board_)\n\u001b[0;32m----> 7\u001b[0m won \u001b[38;5;241m=\u001b[39m \u001b[43mgames\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43msimulation\u001b[49m\u001b[43m(\u001b[49m\u001b[43mnode_\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mboard_\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m      8\u001b[0m games\u001b[38;5;241m.\u001b[39mback_propagation(won, node_)\n",
      "Cell \u001b[0;32mIn[1062], line 28\u001b[0m, in \u001b[0;36mgame.simulation\u001b[0;34m(self, expansion, board_at_position)\u001b[0m\n\u001b[1;32m     27\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21msimulation\u001b[39m(\u001b[38;5;28mself\u001b[39m, expansion, board_at_position):\n\u001b[0;32m---> 28\u001b[0m     check \u001b[38;5;241m=\u001b[39m \u001b[43mboard_at_position\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mcheck\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m     30\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m check\u001b[38;5;241m!=\u001b[39m\u001b[38;5;241m0\u001b[39m:\n\u001b[1;32m     31\u001b[0m         \u001b[38;5;28;01mreturn\u001b[39;00m check\n",
      "Cell \u001b[0;32mIn[1059], line 35\u001b[0m, in \u001b[0;36mboard.check\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m     33\u001b[0m \u001b[38;5;28;01mfor\u001b[39;00m j \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mrange\u001b[39m(\u001b[38;5;241m9\u001b[39m):\n\u001b[1;32m     34\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mgrid[i,j]\u001b[38;5;241m!=\u001b[39m\u001b[38;5;241m0\u001b[39m:\n\u001b[0;32m---> 35\u001b[0m         \u001b[38;5;28;01mif\u001b[39;00m \u001b[43mcheck_horizontal\u001b[49m\u001b[43m(\u001b[49m\u001b[43mi\u001b[49m\u001b[43m,\u001b[49m\u001b[43mj\u001b[49m\u001b[43m)\u001b[49m: \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mgrid[i,j]\n\u001b[1;32m     36\u001b[0m         \u001b[38;5;28;01mif\u001b[39;00m check_vertical(i,j): \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mgrid[i,j]\n\u001b[1;32m     37\u001b[0m         \u001b[38;5;28;01mif\u001b[39;00m check_right(i,j): \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mgrid[i,j]\n",
      "Cell \u001b[0;32mIn[1059], line 8\u001b[0m, in \u001b[0;36mboard.check.<locals>.check_horizontal\u001b[0;34m(i, j)\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mcheck\u001b[39m(\u001b[38;5;28mself\u001b[39m):\n\u001b[0;32m----> 8\u001b[0m     \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mcheck_horizontal\u001b[39m(i,j):\n\u001b[1;32m      9\u001b[0m         \u001b[38;5;28;01mif\u001b[39;00m j\u001b[38;5;241m>\u001b[39m\u001b[38;5;241m5\u001b[39m: \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;01mFalse\u001b[39;00m\n\u001b[1;32m     10\u001b[0m         \u001b[38;5;28;01mfor\u001b[39;00m add \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mrange\u001b[39m(\u001b[38;5;241m1\u001b[39m,\u001b[38;5;241m4\u001b[39m):\n",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
     ]
    }
   ],
   "source": [
    "bd = board()\n",
    "nd = node(0,2)\n",
    "games = game(bd, nd)\n",
    "thinker(games,0.5)\n",
    "\n",
    "while 1:\n",
    "    thinker(games, 8)\n",
    "    print('\\nPlayer 1\\n', flush = True)\n",
    "    move = games.best_move()\n",
    "    games.play(move)\n",
    "    \n",
    "    print(games.board.grid, flush = True)\n",
    "    if games.board.check() != 0: \n",
    "        print('1 wins !!!\\n', flush = True)\n",
    "        break\n",
    "    \n",
    "    \n",
    "    \n",
    "    thinker(games,8)\n",
    "    print('\\nPlayer 2\\n', flush = True)\n",
    "    \n",
    "    move = games.best_move()\n",
    "    \n",
    "    games.play(move)\n",
    "    print(games.board.grid, flush = True)\n",
    "    if games.board.check() != 0: \n",
    "        print('2 wins !!!\\n', flush = True)\n",
    "        break"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1075,
   "id": "874fab29",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0, 4, 6, 7]"
      ]
     },
     "execution_count": 1075,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "games.board.possible_plays()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
